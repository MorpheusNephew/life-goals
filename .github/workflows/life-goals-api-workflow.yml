name: Life Goals API
defaults:
  run:
    working-directory: api
on:
  push:
    paths:
      - api/**/**
    branches:
      - main
  pull_request:
    paths:
      - api/**/**
jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test API
        run: |
          yarn install
          yarn test

  api-build:
    runs-on: ubuntu-latest
    needs: api-tests
    if: ${{ needs.api-tests }} == 'success'
    steps:
      - uses: actions/checkout@v3
      - name: build
        run: |
          yarn install
          yarn build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: api_lambda
          path: api/dist/index.js

  terraformn:
    name: terraform
    runs-on: ubuntu-latest
    needs: api-build
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: api/terraform
    if: ${{ needs.api-build.result }} == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN}}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Download api dir
        uses: actions/download-artifact@v3
        with:
          name: api_lambda
          path: api/terraform/resources/api_lambda.js

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: '${{ steps.plan.outputs.stdout }}'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
